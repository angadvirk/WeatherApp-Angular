{"ast":null,"code":"import * as Highcharts from 'highcharts';\nimport more from 'highcharts/highcharts-more';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../data.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"highcharts-angular\";\n\nfunction ChartComponent_div_1_highcharts_chart_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"highcharts-chart\", 3);\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"Highcharts\", ctx_r1.Highcharts)(\"options\", ctx_r1.chartOptions);\n  }\n}\n\nfunction ChartComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 1);\n    i0.ɵɵtemplate(1, ChartComponent_div_1_highcharts_chart_1_Template, 1, 2, \"highcharts-chart\", 2);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.isHighcharts);\n  }\n}\n\nmore(Highcharts);\nexport let ChartComponent = /*#__PURE__*/(() => {\n  class ChartComponent {\n    constructor(dataService) {\n      this.dataService = dataService;\n      this.showChart = false; // Highcharts variables\n\n      this.isHighcharts = typeof Highcharts === 'object';\n      this.Highcharts = Highcharts; // Chart Data\n\n      this.chartOptions = {};\n    }\n\n    updateChartOptions(chartData) {\n      this.chartOptions = {\n        chart: {\n          type: 'arearange',\n          scrollablePlotArea: {\n            minWidth: 600\n          }\n        },\n        exporting: {\n          chartOptions: {\n            plotOptions: {\n              series: {\n                dataLabels: {\n                  enabled: true\n                }\n              }\n            }\n          },\n          fallbackToExportServer: false\n        },\n        title: {\n          text: 'Temperature Ranges (Min, Max)'\n        },\n        xAxis: {\n          type: 'datetime',\n          dateTimeLabelFormats: {\n            day: '%e %b' // eg: 1 Jan\n\n          },\n          tickInterval: 24 * 3600 * 1000,\n          crosshair: true\n        },\n        yAxis: {\n          tickInterval: 5,\n          title: {\n            text: null\n          }\n        },\n        tooltip: {\n          shared: true,\n          valueSuffix: '°F',\n          xDateFormat: '%A, %b %e'\n        },\n        legend: {\n          enabled: false\n        },\n        series: [{\n          type: 'arearange',\n          lineColor: \"rgba(250, 149, 18, 1)\",\n          name: 'Temperatures',\n          data: chartData,\n          fillColor: {\n            linearGradient: {\n              x1: 0,\n              x2: 0,\n              y1: 0,\n              y2: 1\n            },\n            stops: [[0, \"rgba(252, 180, 22, 1)\"], [1, \"rgba(106, 164, 231, 0.4)\"]]\n          }\n        }]\n      };\n    }\n\n    ngOnInit() {\n      this.dataService.tomorrowObject.subscribe(data => {\n        if (Object.keys(data).length > 0) {\n          // Update Chart Options Data\n          let chartData = [];\n\n          for (let i = 0; i < data.data.timelines[1].intervals.length; i++) {\n            chartData.push([new Date(data.data.timelines[1].intervals[i].startTime).getTime(), data.data.timelines[1].intervals[i].values.temperatureMin, data.data.timelines[1].intervals[i].values.temperatureMax]);\n          }\n\n          this.updateChartOptions(chartData); // Show Chart\n\n          this.showChart = true;\n        }\n      });\n    }\n\n  }\n\n  ChartComponent.ɵfac = function ChartComponent_Factory(t) {\n    return new (t || ChartComponent)(i0.ɵɵdirectiveInject(i1.DataService));\n  };\n\n  ChartComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ChartComponent,\n    selectors: [[\"app-chart\"]],\n    decls: 2,\n    vars: 1,\n    consts: [[\"class\", \"container\", 4, \"ngIf\"], [1, \"container\"], [\"style\", \"width: 100%; height: 400px; display: block;\", 3, \"Highcharts\", \"options\", 4, \"ngIf\"], [2, \"width\", \"100%\", \"height\", \"400px\", \"display\", \"block\", 3, \"Highcharts\", \"options\"]],\n    template: function ChartComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"br\");\n        i0.ɵɵtemplate(1, ChartComponent_div_1_Template, 2, 1, \"div\", 0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.showChart);\n      }\n    },\n    directives: [i2.NgIf, i3.HighchartsChartComponent],\n    styles: [\"\"]\n  });\n  return ChartComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}